{"version":3,"sources":["components/SearchBox.js","components/Scroll.js","components/Card.js","components/CardArray.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchChange","id","className","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","Card","name","email","alt","src","CardArray","robots","map","user","index","key","App","onSearchChange","event","setState","searchField","target","value","state","this","filteredRobots","filter","robot","toLowerCase","includes","fetch","then","response","json","users","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAeeA,EAZG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKC,GAAG,YAAYC,UAAU,OAC1B,2BAAOA,UAAU,mCACjBC,KAAK,SACLC,YAAY,gCACZC,SAAYL,MCGTM,EATA,SAACC,GACZ,OACI,yBACCC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAC5DJ,EAAMK,WCYJC,EAhBF,SAAC,GAAuB,IAAtBZ,EAAqB,EAArBA,GAAIa,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACrB,OACI,yBAAKb,UAAU,uDACX,yBACAc,IAAM,UACNC,IAAG,+BAA4BhB,EAA5B,cAGH,6BACI,4BAAKa,GACL,2BAAIC,MCCLG,EAVG,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAChB,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GAAP,OAAiB,kBAAC,EAAD,CAAMC,IAAOD,EAAOrB,GAAMkB,EAAOG,GAAOrB,GAAIa,KAAQK,EAAOG,GAAOR,KAAMC,MAASI,EAAOG,GAAOP,aCwC5HS,G,wDAxCX,aAAc,IAAD,8BACT,gBAUJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SARzC,EAAKC,MAAQ,CACTZ,OAAQ,GACRS,YAAa,IANR,E,qDAeJ,IAAD,EAC0BI,KAAKD,MAA5BZ,EADH,EACGA,OAAQS,EADX,EACWA,YAGTK,EAAiBd,EAAOe,QAAO,SAAAC,GAAK,OAAIA,EAAMrB,KAAKsB,cAAcC,SAAST,EAAYQ,kBAE5F,OACI,yBAAKlC,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWF,aAAcgC,KAAKP,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAWN,OAAUc,Q,0CAOjB,IAAD,OACfK,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UACtBF,MAAK,SAAAG,GAAK,OAAI,EAAKf,SAAS,CAAER,OAAQuB,W,GArCrCC,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.bed8d49b.chunk.js","sourcesContent":["// Import Statements\nimport React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return(\n        <div id='searchBox' className=\"pa2\">\n            <input className=\"pa3 ba b--green bg-lightest-blue\" \n            type=\"search\"\n            placeholder=\"Enter the robo to be searched\"\n            onChange = {searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","// Import statements\nimport React from 'react';\n\nconst Scroll = (props) => {\n    return(\n        <div\n         style={{overflowY: 'scroll', border: '2px solid black', height: '570px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","// Import statements\nimport React from 'react';\n\nconst Card = ({id, name, email}) => {\n    return(\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img\n            alt = 'robopic'\n            src = {`https://robohash.org/${id}?200x200`}>\n            </img>\n            \n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","// Import Statements\nimport React from 'react';\nimport Card from './Card';\n\nconst CardArray = ({robots}) => {\n    return(\n        <div>\n            {\n                robots.map((user, index) => <Card key = {index} id = {robots[index].id} name = {robots[index].name} email = {robots[index].email}/>)\n            }\n        </div>\n    );\n}\n\nexport default CardArray;","import React, {Component} from 'react';\nimport SearchBox from '../components/SearchBox';\n// Import Statements\nimport Scroll from '../components/Scroll';\nimport CardArray from '../components/CardArray';\nimport './App.css';\n\nclass App extends Component{\n    constructor(){\n        super();\n\n        // Instantiate the component's state \n        this.state = {\n            robots: [],\n            searchField: ''\n        };\n    }\n\n    // Update the search field state whenever the user makes a change\n    onSearchChange = (event) => {\n        this.setState({searchField: event.target.value});\n    }\n    \n    render(){\n        const {robots, searchField} = this.state;\n\n        // Obtain list of those robots that match the search field\n        const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()));\n        \n        return(\n            <div className=\"tc\">\n                <h1 className='f1'>RoboFriends</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                    <CardArray robots = {filteredRobots} />\n                </Scroll>\n            </div>\n        );\n    }\n\n    // Once the component is mounted, obtain the robots through an external API\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n                .then(users => this.setState({ robots: users}))\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Import Statements\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n// Render the main App container\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}